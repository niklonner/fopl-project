--
-- Grammar for the Swagger-language.
--

comment "//";

Program . Prog ::= [SubT];
terminator nonempty SubT "";

SubTournament . SubT ::= String ":" Ident "{" [Stmt] "}";
terminator Stmt ";";


Assignment  . Stmt ::= Ident "=" Exp;
ParamMethod . Stmt ::= Ident ":" [Exp];
separator nonempty Exp ",";
Method      . Stmt ::= Ident;

Eunion        . Exp  ::= "(" [Exp] ")";
separator Exp ",";
Eeq           . Exp  ::= Exp "==" Exp1;
Elt           . Exp  ::= Exp "<" Exp1;
Elteq         . Exp  ::= Exp "<=" Exp1;
Egt           . Exp  ::= Exp ">" Exp1;
Egteq         . Exp  ::= Exp ">=" Exp1;
Eadd          . Exp  ::= Exp "+" Exp1;
Esub          . Exp  ::= Exp "-" Exp1;
Eintersect    . Exp1 ::= Exp1 "&" Exp2;
ENotIntersect . Exp1 ::= Exp1 "|" Exp2;
Ediv          . Exp1 ::= Exp1 "/" Exp2;
Emul          . Exp1 ::= Exp1 "*" Exp2;
Emod          . Exp1 ::= Exp1 "%" Exp2;
Epow          . Exp2 ::= Exp2 "^" Exp3;
Efol          . Exp3 ::= Exp3 "." Ident;
Eint          . Exp4 ::= Integer;
EDouble       . Exp4 ::= Double;
EVar          . Exp4 ::= Ident;
EString       . Exp4 ::= String;
coercions Exp 4;
