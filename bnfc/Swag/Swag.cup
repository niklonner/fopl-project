// -*- Java -*- This Cup file was machine-generated by BNFC
package Swag.Absyn;

import java_cup.runtime.*;
import Swag.*;
import Swag.Absyn.*;

parser code {:
  public Swag.Absyn.Program pProgram() throws Exception
  {
	Symbol res = parse();
	return (Swag.Absyn.Program) res.value;
  }

public void syntax_error(Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}

:}

nonterminal Swag.Absyn.Program Program;
nonterminal Swag.Absyn.Tournament Tournament;
nonterminal Swag.Absyn.ListTournament ListTournament;
nonterminal Swag.Absyn.ListStmt ListStmt;
nonterminal Swag.Absyn.Stmt Stmt;
nonterminal Swag.Absyn.SimpleExp SimpleExp;
nonterminal Swag.Absyn.Exp Exp;
nonterminal Swag.Absyn.Set Set;
nonterminal Swag.Absyn.Set Set1;
nonterminal Swag.Absyn.Set Set2;
nonterminal Swag.Absyn.Set Set3;
nonterminal Swag.Absyn.Set Set4;
nonterminal Swag.Absyn.StringComparison StringComparison;
nonterminal Swag.Absyn.ComparisonOp ComparisonOp;
nonterminal Swag.Absyn.Player Player;
nonterminal Swag.Absyn.ListSet ListSet;
nonterminal Swag.Absyn.Selection Selection;
nonterminal Swag.Absyn.Location Location;
nonterminal Swag.Absyn.Part Part;

terminal _SYMB_0;    //   {
terminal _SYMB_1;    //   }
terminal _SYMB_2;    //   ;
terminal _SYMB_3;    //   =
terminal _SYMB_4;    //   +
terminal _SYMB_5;    //   [
terminal _SYMB_6;    //   ]
terminal _SYMB_7;    //   <
terminal _SYMB_8;    //   >
terminal _SYMB_9;    //   <=
terminal _SYMB_10;    //   >=
terminal _SYMB_11;    //   (
terminal _SYMB_12;    //   )
terminal _SYMB_13;    //   ,
terminal _SYMB_14;    //   %
terminal _SYMB_15;    //   /
terminal _SYMB_16;    //   bottom
terminal _SYMB_17;    //   from
terminal _SYMB_18;    //   in
terminal _SYMB_19;    //   intersect
terminal _SYMB_20;    //   minus
terminal _SYMB_21;    //   not
terminal _SYMB_22;    //   send
terminal _SYMB_23;    //   take
terminal _SYMB_24;    //   to
terminal _SYMB_25;    //   top
terminal _SYMB_26;    //   with

terminal String _STRING_;

terminal Integer _INTEGER_;

terminal String _IDENT_;



start with Program;


Program ::= ListTournament:p_1  {: if (p_1 != null) p_1 = p_1.reverse();  RESULT = new Swag.Absyn.Prog(p_1); :} 
;
Tournament ::= _IDENT_:p_1 _SYMB_0 ListStmt:p_3 _SYMB_1  {: if (p_3 != null) p_3 = p_3.reverse();  RESULT = new Swag.Absyn.Tournament(p_1,p_3); :} 
;
ListTournament ::=  /* empty */  {: RESULT = null; :} 
  | ListTournament:p_1 Tournament:p_2 _SYMB_2  {:  RESULT = new Swag.Absyn.ListTournament(p_2,p_1); :}
;
ListStmt ::=  /* empty */  {: RESULT = null; :} 
  | ListStmt:p_1 Stmt:p_2 _SYMB_2  {:  RESULT = new Swag.Absyn.ListStmt(p_2,p_1); :}
;
Stmt ::= Exp:p_1  {:  RESULT = new Swag.Absyn.SExp(p_1); :} 
  | _IDENT_:p_1 _SYMB_3 Exp:p_3  {:  RESULT = new Swag.Absyn.SAss(p_1,p_3); :}
  | _SYMB_22 Set:p_2 _SYMB_24 _IDENT_:p_4  {:  RESULT = new Swag.Absyn.SSend(p_2,p_4); :}
;
SimpleExp ::= _STRING_:p_1  {:  RESULT = new Swag.Absyn.SimpExpStr(p_1); :} 
  | _INTEGER_:p_1  {:  RESULT = new Swag.Absyn.SimpExpInt(p_1); :}
;
Exp ::= SimpleExp:p_1  {:  RESULT = new Swag.Absyn.ESimp(p_1); :} 
  | Set:p_1  {:  RESULT = new Swag.Absyn.ESet(p_1); :}
;
Set ::= Set:p_1 _SYMB_20 Set1:p_3  {:  RESULT = new Swag.Absyn.SDiff(p_1,p_3); :} 
  | Set:p_1 _SYMB_4 Set1:p_3  {:  RESULT = new Swag.Absyn.SUnionP(p_1,p_3); :}
  | Set1:p_1  {:  RESULT = (p_1); :}
;
Set1 ::= Set1:p_1 _SYMB_19 Set2:p_3  {:  RESULT = new Swag.Absyn.SIntersect(p_1,p_3); :} 
  | Set2:p_1  {:  RESULT = (p_1); :}
;
Set2 ::= _SYMB_21 _SYMB_18 Set:p_3  {:  RESULT = new Swag.Absyn.SNot(p_3); :} 
  | Set3:p_1  {:  RESULT = (p_1); :}
;
Set3 ::= _SYMB_26 _STRING_:p_2  {:  RESULT = new Swag.Absyn.SHasAttr(p_2); :} 
  | Set4:p_1  {:  RESULT = (p_1); :}
;
Set4 ::= _IDENT_:p_1  {:  RESULT = new Swag.Absyn.SVar(p_1); :} 
  | Selection:p_1  {:  RESULT = new Swag.Absyn.SSel(p_1); :}
  | _SYMB_5 ListSet:p_2 _SYMB_6  {:  RESULT = new Swag.Absyn.SUnion(p_2); :}
  | _SYMB_11 Set:p_2 _SYMB_12  {:  RESULT = (p_2); :}
;
StringComparison ::= _STRING_:p_1 ComparisonOp:p_2 SimpleExp:p_3  {:  RESULT = new Swag.Absyn.SCmp(p_1,p_2,p_3); :} 
;
ComparisonOp ::= _SYMB_3  {:  RESULT = new Swag.Absyn.CmpOpEq(); :} 
  | _SYMB_7  {:  RESULT = new Swag.Absyn.CmpOpLt(); :}
  | _SYMB_8  {:  RESULT = new Swag.Absyn.CmpOpGt(); :}
  | _SYMB_9  {:  RESULT = new Swag.Absyn.CmpOpLeq(); :}
  | _SYMB_10  {:  RESULT = new Swag.Absyn.CmpOpGeq(); :}
;
Player ::= _IDENT_:p_1  {:  RESULT = new Swag.Absyn.Player(p_1); :} 
;
ListSet ::=  /* empty */  {: RESULT = null; :} 
  | Set:p_1  {: RESULT = new Swag.Absyn.ListSet(p_1,null); :}
  | Set:p_1 _SYMB_13 ListSet:p_3  {:  RESULT = new Swag.Absyn.ListSet(p_1,p_3); :}
;
Selection ::= _SYMB_23 Location:p_2 Part:p_3 _SYMB_17 Set:p_5  {:  RESULT = new Swag.Absyn.SelTake(p_2,p_3,p_5); :} 
;
Location ::= _SYMB_25  {:  RESULT = new Swag.Absyn.LTop(); :} 
  | _SYMB_16  {:  RESULT = new Swag.Absyn.LBottom(); :}
;
Part ::= _INTEGER_:p_1  {:  RESULT = new Swag.Absyn.PInt(p_1); :} 
  | _INTEGER_:p_1 _SYMB_14  {:  RESULT = new Swag.Absyn.PPerc(p_1); :}
  | _INTEGER_:p_1 _SYMB_15 _INTEGER_:p_3  {:  RESULT = new Swag.Absyn.PFrac(p_1,p_3); :}
;

