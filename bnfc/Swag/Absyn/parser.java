
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Apr 23 21:40:33 CEST 2013
//----------------------------------------------------

package Swag.Absyn;

import java_cup.runtime.*;
import Swag.*;
import Swag.Absyn.*;

/** CUP v0.10k generated parser.
  * @version Tue Apr 23 21:40:33 CEST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\003\003\000\002\004" +
    "\006\000\002\005\002\000\002\005\005\000\002\006\002" +
    "\000\002\006\005\000\002\007\003\000\002\007\005\000" +
    "\002\007\006\000\002\010\003\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\013\003" +
    "\000\002\014\005\000\002\014\003\000\002\015\004\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\017\005\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\021\003\000\002\022\002\000" +
    "\002\022\003\000\002\022\005\000\002\023\007\000\002" +
    "\024\003\000\002\024\003\000\002\025\003\000\002\025" +
    "\004\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\006\002\ufffe\041\ufffe\001\002\000\004\002" +
    "\077\001\002\000\006\002\000\041\006\001\002\000\004" +
    "\004\011\001\002\000\004\006\010\001\002\000\006\002" +
    "\ufffd\041\ufffd\001\002\000\026\005\ufffc\011\ufffc\017\ufffc" +
    "\031\ufffc\032\ufffc\033\ufffc\036\ufffc\037\ufffc\040\ufffc\041" +
    "\ufffc\001\002\000\026\005\024\011\022\017\021\031\034" +
    "\032\033\033\032\036\031\037\014\040\013\041\016\001" +
    "\002\000\004\006\ufff6\001\002\000\004\006\ufff7\001\002" +
    "\000\022\006\uffe9\010\uffe9\012\uffe9\020\uffe9\021\uffe9\027" +
    "\uffe9\030\uffe9\034\uffe9\001\002\000\014\006\uffea\007\075" +
    "\010\uffea\027\uffea\030\uffea\001\002\000\004\006\074\001" +
    "\002\000\004\006\ufff5\001\002\000\016\011\022\017\021" +
    "\031\034\033\032\036\031\041\040\001\002\000\020\011" +
    "\022\012\uffdf\017\021\031\034\033\032\036\031\041\040" +
    "\001\002\000\022\006\uffeb\010\uffeb\012\uffeb\020\uffeb\021" +
    "\uffeb\027\uffeb\030\uffeb\034\uffeb\001\002\000\004\006\uffff" +
    "\001\002\000\022\006\uffed\010\uffed\012\uffed\020\uffed\021" +
    "\uffed\027\uffed\030\uffed\034\uffed\001\002\000\004\006\ufffa" +
    "\001\002\000\022\006\uffef\010\uffef\012\uffef\020\uffef\021" +
    "\uffef\027\uffef\030\uffef\034\uffef\001\002\000\022\006\ufff1" +
    "\010\ufff1\012\ufff1\020\ufff1\021\ufff1\027\042\030\ufff1\034" +
    "\ufff1\001\002\000\004\037\064\001\002\000\006\024\053" +
    "\035\054\001\002\000\016\011\022\017\021\031\034\033" +
    "\032\036\031\041\040\001\002\000\004\026\045\001\002" +
    "\000\010\006\ufff4\010\036\030\037\001\002\000\016\011" +
    "\022\017\021\031\034\033\032\036\031\041\040\001\002" +
    "\000\016\011\022\017\021\031\034\033\032\036\031\041" +
    "\040\001\002\000\022\006\uffea\010\uffea\012\uffea\020\uffea" +
    "\021\uffea\027\uffea\030\uffea\034\uffea\001\002\000\022\006" +
    "\ufff3\010\ufff3\012\ufff3\020\ufff3\021\ufff3\027\042\030\ufff3" +
    "\034\ufff3\001\002\000\016\011\022\017\021\031\034\033" +
    "\032\036\031\041\040\001\002\000\022\006\ufff0\010\ufff0" +
    "\012\ufff0\020\ufff0\021\ufff0\027\ufff0\030\ufff0\034\ufff0\001" +
    "\002\000\022\006\ufff2\010\ufff2\012\ufff2\020\ufff2\021\ufff2" +
    "\027\042\030\ufff2\034\ufff2\001\002\000\016\011\022\017" +
    "\021\031\034\033\032\036\031\041\040\001\002\000\022" +
    "\006\uffee\010\036\012\uffee\020\uffee\021\uffee\027\uffee\030" +
    "\037\034\uffee\001\002\000\010\010\036\030\037\034\050" +
    "\001\002\000\004\041\051\001\002\000\004\006\ufff8\001" +
    "\002\000\004\040\056\001\002\000\004\040\uffda\001\002" +
    "\000\004\040\uffdb\001\002\000\004\025\062\001\002\000" +
    "\010\022\060\023\057\025\uffd9\001\002\000\004\040\061" +
    "\001\002\000\004\025\uffd8\001\002\000\004\025\uffd7\001" +
    "\002\000\016\011\022\017\021\031\034\033\032\036\031" +
    "\041\040\001\002\000\022\006\uffdc\010\036\012\uffdc\020" +
    "\uffdc\021\uffdc\027\uffdc\030\037\034\uffdc\001\002\000\022" +
    "\006\uffec\010\uffec\012\uffec\020\uffec\021\uffec\027\uffec\030" +
    "\uffec\034\uffec\001\002\000\012\010\036\012\uffde\021\070" +
    "\030\037\001\002\000\004\012\067\001\002\000\022\006" +
    "\uffe8\010\uffe8\012\uffe8\020\uffe8\021\uffe8\027\uffe8\030\uffe8" +
    "\034\uffe8\001\002\000\020\011\022\012\uffdf\017\021\031" +
    "\034\033\032\036\031\041\040\001\002\000\004\012\uffdd" +
    "\001\002\000\010\010\036\020\073\030\037\001\002\000" +
    "\022\006\uffe7\010\uffe7\012\uffe7\020\uffe7\021\uffe7\027\uffe7" +
    "\030\uffe7\034\uffe7\001\002\000\026\005\ufffb\011\ufffb\017" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\036\ufffb\037\ufffb\040\ufffb" +
    "\041\ufffb\001\002\000\022\011\022\017\021\031\034\033" +
    "\032\036\031\037\014\040\013\041\040\001\002\000\004" +
    "\006\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\006\003\003\005\004\001\001\000\002\001" +
    "\001\000\004\004\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\011\001\001\000" +
    "\024\007\016\010\017\011\025\012\034\013\027\014\026" +
    "\015\024\016\022\023\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\071\013\027\014" +
    "\026\015\024\016\022\023\014\001\001\000\020\012\064" +
    "\013\027\014\026\015\024\016\022\022\065\023\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\051\001\001\000\016\012\046" +
    "\013\027\014\026\015\024\016\022\023\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\043\014\026" +
    "\015\024\016\022\023\014\001\001\000\014\013\040\014" +
    "\026\015\024\016\022\023\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\042\015\024\016\022\023" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\045\013\027\014\026\015\024\016\022\023\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\062\013\027\014\026\015\024\016\022\023\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\064" +
    "\013\027\014\026\015\024\016\022\022\070\023\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\017\011\075\012\034\013" +
    "\027\014\026\015\024\016\022\023\014\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Swag.Absyn.Program pProgram() throws Exception
  {
	Symbol res = parse();
	return (Swag.Absyn.Program) res.value;
  }

public void syntax_error(Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Part ::= _INTEGER_ _SYMB_15 _INTEGER_ 
            {
              Swag.Absyn.Part RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Integer p_3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.PFrac(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Part*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Part ::= _INTEGER_ _SYMB_14 
            {
              Swag.Absyn.Part RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Swag.Absyn.PPerc(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Part*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Part ::= _INTEGER_ 
            {
              Swag.Absyn.Part RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.PInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*Part*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Location ::= _SYMB_16 
            {
              Swag.Absyn.Location RESULT = null;
		  RESULT = new Swag.Absyn.LBottom(); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Location*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Location ::= _SYMB_25 
            {
              Swag.Absyn.Location RESULT = null;
		  RESULT = new Swag.Absyn.LTop(); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*Location*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Selection ::= _SYMB_23 Location Part _SYMB_17 Set 
            {
              Swag.Absyn.Selection RESULT = null;
		Swag.Absyn.Location p_2 = (Swag.Absyn.Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Swag.Absyn.Part p_3 = (Swag.Absyn.Part)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Swag.Absyn.Set p_5 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SelTake(p_2,p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*Selection*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ListSet ::= Set _SYMB_13 ListSet 
            {
              Swag.Absyn.ListSet RESULT = null;
		Swag.Absyn.Set p_1 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Swag.Absyn.ListSet p_3 = (Swag.Absyn.ListSet)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.ListSet(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*ListSet*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListSet ::= Set 
            {
              Swag.Absyn.ListSet RESULT = null;
		Swag.Absyn.Set p_1 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Swag.Absyn.ListSet(p_1,null); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*ListSet*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListSet ::= 
            {
              Swag.Absyn.ListSet RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*ListSet*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Player ::= _IDENT_ 
            {
              Swag.Absyn.Player RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.Player(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*Player*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ComparisonOp ::= _SYMB_10 
            {
              Swag.Absyn.ComparisonOp RESULT = null;
		  RESULT = new Swag.Absyn.CmpOpGeq(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ComparisonOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ComparisonOp ::= _SYMB_9 
            {
              Swag.Absyn.ComparisonOp RESULT = null;
		  RESULT = new Swag.Absyn.CmpOpLeq(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ComparisonOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ComparisonOp ::= _SYMB_8 
            {
              Swag.Absyn.ComparisonOp RESULT = null;
		  RESULT = new Swag.Absyn.CmpOpGt(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ComparisonOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ComparisonOp ::= _SYMB_7 
            {
              Swag.Absyn.ComparisonOp RESULT = null;
		  RESULT = new Swag.Absyn.CmpOpLt(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ComparisonOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ComparisonOp ::= _SYMB_3 
            {
              Swag.Absyn.ComparisonOp RESULT = null;
		  RESULT = new Swag.Absyn.CmpOpEq(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*ComparisonOp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // StringComparison ::= _STRING_ ComparisonOp SimpleExp 
            {
              Swag.Absyn.StringComparison RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Swag.Absyn.ComparisonOp p_2 = (Swag.Absyn.ComparisonOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Swag.Absyn.SimpleExp p_3 = (Swag.Absyn.SimpleExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SCmp(p_1,p_2,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*StringComparison*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Set4 ::= _SYMB_11 Set _SYMB_12 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.Set p_2 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = (p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Set4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Set4 ::= _SYMB_5 ListSet _SYMB_6 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.ListSet p_2 = (Swag.Absyn.ListSet)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Swag.Absyn.SUnion(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Set4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Set4 ::= Selection 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.Selection p_1 = (Swag.Absyn.Selection)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SSel(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Set4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Set4 ::= _IDENT_ 
            {
              Swag.Absyn.Set RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*Set4*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Set3 ::= Set4 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.Set p_1 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = (p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Set3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Set3 ::= _SYMB_26 _STRING_ 
            {
              Swag.Absyn.Set RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SHasAttr(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Set3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Set2 ::= Set3 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.Set p_1 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = (p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Set2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Set2 ::= _SYMB_21 _SYMB_18 Set 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.Set p_3 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SNot(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Set2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Set1 ::= Set2 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.Set p_1 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = (p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Set1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Set1 ::= Set1 _SYMB_19 Set2 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.Set p_1 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Swag.Absyn.Set p_3 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SIntersect(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Set1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Set ::= Set1 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.Set p_1 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = (p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Set*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Set ::= Set _SYMB_4 Set1 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.Set p_1 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Swag.Absyn.Set p_3 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SUnionP(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Set*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Set ::= Set _SYMB_20 Set1 
            {
              Swag.Absyn.Set RESULT = null;
		Swag.Absyn.Set p_1 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Swag.Absyn.Set p_3 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SDiff(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Set*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp ::= Set 
            {
              Swag.Absyn.Exp RESULT = null;
		Swag.Absyn.Set p_1 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.ESet(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Exp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp ::= SimpleExp 
            {
              Swag.Absyn.Exp RESULT = null;
		Swag.Absyn.SimpleExp p_1 = (Swag.Absyn.SimpleExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.ESimp(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Exp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SimpleExp ::= _INTEGER_ 
            {
              Swag.Absyn.SimpleExp RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SimpExpInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SimpleExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SimpleExp ::= _STRING_ 
            {
              Swag.Absyn.SimpleExp RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SimpExpStr(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SimpleExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Stmt ::= _SYMB_22 Set _SYMB_24 _IDENT_ 
            {
              Swag.Absyn.Stmt RESULT = null;
		Swag.Absyn.Set p_2 = (Swag.Absyn.Set)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SSend(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stmt ::= _IDENT_ _SYMB_3 Exp 
            {
              Swag.Absyn.Stmt RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Swag.Absyn.Exp p_3 = (Swag.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stmt ::= Exp 
            {
              Swag.Absyn.Stmt RESULT = null;
		Swag.Absyn.Exp p_1 = (Swag.Absyn.Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT = new Swag.Absyn.SExp(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Stmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListStmt ::= ListStmt Stmt _SYMB_2 
            {
              Swag.Absyn.ListStmt RESULT = null;
		Swag.Absyn.ListStmt p_1 = (Swag.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Swag.Absyn.Stmt p_2 = (Swag.Absyn.Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Swag.Absyn.ListStmt(p_2,p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListStmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ListStmt ::= 
            {
              Swag.Absyn.ListStmt RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListStmt*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ListTournament ::= ListTournament Tournament _SYMB_2 
            {
              Swag.Absyn.ListTournament RESULT = null;
		Swag.Absyn.ListTournament p_1 = (Swag.Absyn.ListTournament)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Swag.Absyn.Tournament p_2 = (Swag.Absyn.Tournament)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new Swag.Absyn.ListTournament(p_2,p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListTournament*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListTournament ::= 
            {
              Swag.Absyn.ListTournament RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListTournament*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Tournament ::= _IDENT_ _SYMB_0 ListStmt _SYMB_1 
            {
              Swag.Absyn.Tournament RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Swag.Absyn.ListStmt p_3 = (Swag.Absyn.ListStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if (p_3 != null) p_3 = p_3.reverse();  RESULT = new Swag.Absyn.Tournament(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Tournament*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListTournament 
            {
              Swag.Absyn.Program RESULT = null;
		Swag.Absyn.ListTournament p_1 = (Swag.Absyn.ListTournament)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if (p_1 != null) p_1 = p_1.reverse();  RESULT = new Swag.Absyn.Prog(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		Swag.Absyn.Program start_val = (Swag.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

