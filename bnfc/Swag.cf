--
-- Grammar for the Swagger-language.
--

comment "//";

Program . Prog ::= [SubT];
terminator nonempty SubT "";

SubTournament . SubT ::= Ident ":" Ident "{" [Stmt] "}";
terminator Stmt ";";

Assignment  . Stmt ::= Ident "=" Exp;
ParamMethod . Stmt ::= Ident ":" [Exp];
separator nonempty Exp ",";
Method      . Stmt ::= Ident;

EStringExp . Exp ::= String;
EVarExp    . Exp ::= Ident;
EMathExp   . Exp ::= MathExp;
ESetExp    . Exp ::= SetExp;

MAdd . MathExp  ::= MathExp "+" MathExp1;
MSub . MathExp  ::= MathExp "-" MathExp1;
MMul . MathExp1 ::= MathExp1 "*" MathExp2;
MDiv . MathExp1 ::= MathExp1 "/" MathExp2;
--MPer . MathExp1 ::= MathExp1 "%";
MMod . MathExp1 ::= MathExp1 "%" MathExp2;
MPow . MathExp2 ::= MathExp2 "^" MathExp3;
MInt . MathExp3 ::= Integer;
MFlo . MathExp3 ::= Double;
MVar . MathExp4 ::= Ident;
coercions MathExp 4;

SUnion        . SetExp ::= "(" [SetExp] ")";
separator SetExp ",";
SDiff         . SetExp1 ::= SetExp1 "-" SetExp2;
SUnionP       . SetExp1 ::= SetExp1 "+" SetExp2;
SIntersect    . SetExp2 ::= SetExp2 "&" SetExp3;
SNotIntersect . SetExp2 ::= SetExp2 "|" SetExp3;
SAttrCmpE     . SetExp3 ::= SetExp3 ComparisonOp MathExp;
SAttrCmpS     . SetExp3 ::= SetExp3 ComparisonOp String;
SAttrCmpV     . SetExp3 ::= SetExp3 ComparisonOp Ident;
SHasAttr      . SetExp4 ::= SetExp4 "." Ident;
SVar          . SetExp5 ::= Ident;
coercions SetExp 5;

CmpOpEq  . ComparisonOp ::= "=";
CmpOpLt  . ComparisonOp ::= "<";
CmpOpGt  . ComparisonOp ::= ">";
CmpOpLeq . ComparisonOp ::= "<=";
CmpOpGeq . ComparisonOp ::= ">=";
